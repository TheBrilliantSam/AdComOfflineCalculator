// Currently supported balances: All AdCom events and All AdAges events!

// Entering amounts is not case sensitive, but please use the dot decimal point (.) for tenths and beyond (parser ignores commas).
// If you don't enter a placeholder value for a generator at the end of an industry, the program will ignore it.
// An empty string in amounts is interpreted as 0.

import java.util.*;
public class Offline {
    public static void main(String args[]) {

      ///////////////////////////
      ////  USER INPUT AREA  ////
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      /**/  String eventName = "scandinavia";
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////  GENERATOR AMOUNTS: enter RESOURCE AMOUNT followed by generators separated by a slash [/]; insert ampersand [&] between industries
      /**/  String amounts = "56.3nn/8.33kk/1.71hh/523.7dd/732.5aa/2.5b/6 & 289.4kk/5.67hh/1.58ee/316.4aa/406.46m & 0/3.75ee/25.5aa/101.1m";
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////  COMMON LEVELS: enter researcher levels in hexadecimal, add a space in between industries
      /**/  String commons = "555440 5454 563";
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////  RARE CARDS: enter researcher levels in hexadecimal, add whitespaces or symbols as you see fit for organization
      /**/  String rares = "323 324 313 3";
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////  CALCULATE FOR A DURATION OF TIME
      /**/  boolean timeCalculationEnabled = false;
      /**/  String time = "1h20m45s"; // separate consecutive times with semicolon [;]
      /**/  int industry = 1; // enter 0 for all industries
      /**/  boolean randomize = true; // randomize crits for generators with under 500 runs, denoted by asterisk [*]
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////  CALCULATE UNTIL A MISSION COMPLETES
      /**/  boolean missionCalculationEnabled = !timeCalculationEnabled;
      /**/  int targetIndustry = 1;
      /**/  String targetAmount = "330nn"; // how many of the resource
      /**/  boolean printAllIndustries = true; // target industry is printed by default, but you can choose to print all industries in addition
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////  GLOBAL SETTINGS
      /**/  boolean boost = true;
      /**/  boolean resetResource = false;
      /**/  boolean print = true;
      /**/  boolean emoji = true;
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////  RARE RESEARCHERS HELP (this will disable any calculations)
      /**/  boolean help = false;
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
      Event evt = new Event(eventName);
      
      if(evt.isValid()){
          
          String[][] amountsArr = Operations.parseAmounts(amounts);
          int[][] commonArr = Operations.parseCommons(commons);
          int[] rareArr = Operations.parseRares(rares);
          
          if(help) evt.printRareDetails();
          
          if(timeCalculationEnabled && !help) evt.calculateOffline(industry, amountsArr, commonArr, rareArr, time, boost, randomize, resetResource, print, emoji);
          
          if(missionCalculationEnabled && !help) evt.offlineUntilResource(targetAmount, targetIndustry, amountsArr, commonArr, rareArr, boost, resetResource, print, printAllIndustries, emoji);
          
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //  CALCULATION METHODS GUIDE
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //  calculateOffline(int ind, String[][] amounts, int[][] commons, int[] rares, Time dur, boolean boost, boolean rand, boolean reset, boolean print);
          //  offlineUntilResource(String tarAmm, int tarInd, String[][] amounts, int[][] commons, int[] rares, boolean boost, boolean rand, boolean reset, boolean print, boolean printAll)
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          
          // Add any additional calculations below.
          
     
      }

    }
}